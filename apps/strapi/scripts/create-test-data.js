#!/usr/bin/env node

/**
 * Script pour cr√©er des codes promo de test
 * Usage: node create-test-data.js
 */

const fetch = require('node-fetch');

const STRAPI_URL = 'http://localhost:1337';

const codesPromo = [
  {
    code: 'BIENVENUE10',
    nom: 'R√©duction premi√®re commande',
    description: '10% de r√©duction sur votre premi√®re commande',
    typeReduction: 'POURCENTAGE',
    valeurReduction: 10,
    montantMinimum: 15,
    dateDebut: new Date('2024-01-01'),
    dateFin: new Date('2025-12-31'),
    utilisationsMax: 1000,
    utilisationsActuelles: 0,
    actif: true,
    premiereCommande: true
  },
  {
    code: 'WEEK5',
    nom: 'R√©duction week-end',
    description: '5‚Ç¨ de r√©duction le week-end',
    typeReduction: 'MONTANT_FIXE',
    valeurReduction: 5,
    montantMinimum: 25,
    dateDebut: new Date('2024-01-01'),
    dateFin: new Date('2025-12-31'),
    utilisationsActuelles: 0,
    actif: true
  },
  {
    code: 'NOEL20',
    nom: 'Promotion de No√´l',
    description: '20% de r√©duction pour les f√™tes',
    typeReduction: 'POURCENTAGE',
    valeurReduction: 20,
    montantMinimum: 30,
    dateDebut: new Date('2024-12-01'),
    dateFin: new Date('2025-01-31'),
    utilisationsMax: 500,
    utilisationsActuelles: 0,
    actif: true
  }
];

async function createTestData() {
  console.log('üå± Cr√©ation des donn√©es de test...');
  
  try {
    // Attendre que Strapi soit d√©marr√©
    console.log('‚è≥ V√©rification que Strapi est d√©marr√©...');
    let strapiReady = false;
    let attempts = 0;
    
    while (!strapiReady && attempts < 30) {
      try {
        const response = await fetch(`${STRAPI_URL}/admin`);
        if (response.status < 500) {
          strapiReady = true;
        }
      } catch (error) {
        // Strapi pas encore d√©marr√©
      }
      
      if (!strapiReady) {
        await new Promise(resolve => setTimeout(resolve, 2000));
        attempts++;
        console.log(`   ... tentative ${attempts}/30`);
      }
    }
    
    if (!strapiReady) {
      console.error('‚ùå Strapi n\'est pas accessible apr√®s 60 secondes');
      process.exit(1);
    }
    
    console.log('‚úÖ Strapi est accessible!');
    
    // Cr√©er les codes promo
    for (const codePromo of codesPromo) {
      try {
        // V√©rifier si le code existe d√©j√†
        const checkResponse = await fetch(
          `${STRAPI_URL}/api/codes-promo/valider/${codePromo.code}`,
          { method: 'GET' }
        );
        
        if (checkResponse.status === 404) {
          // Le code n'existe pas, on peut le cr√©er
          const createResponse = await fetch(`${STRAPI_URL}/api/codes-promo`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ data: codePromo }),
          });
          
          if (createResponse.ok) {
            console.log(`‚úÖ Code promo "${codePromo.code}" cr√©√©`);
          } else {
            console.log(`‚ö†Ô∏è  Erreur lors de la cr√©ation du code "${codePromo.code}"`);
          }
        } else {
          console.log(`‚ÑπÔ∏è  Code promo "${codePromo.code}" existe d√©j√†`);
        }
      } catch (error) {
        console.log(`‚ùå Erreur avec le code "${codePromo.code}":`, error.message);
      }
    }
    
    console.log('üéâ Cr√©ation des donn√©es de test termin√©e!');
    console.log('');
    console.log('üìã Codes promo disponibles:');
    codesPromo.forEach(code => {
      console.log(`   - ${code.code}: ${code.description}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des donn√©es:', error);
    process.exit(1);
  }
}

// V√©rifier si ce script est ex√©cut√© directement
if (require.main === module) {
  createTestData();
}

module.exports = createTestData;
